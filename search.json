[{"title":"How to scrub L2 cache in GPU?","url":"/russ-spec/russ-spec.github.io/2025/06/07/How-to-scrub-L2-cache-in-GPU/","content":"在阅读karpathy大神的开源项目llm.c时, 发现在重复运行CUDA Kernel统计性能的时候，每次Launch Kernel前有一个cudaMemset, 以擦除L2缓存数据，从而得到算子更准确的性能数据。代码如下:\ntemplate&lt;class Kernel, class... KernelArgs&gt;float benchmark_kernel(int repeats, Kernel kernel, KernelArgs&amp;&amp;... kernel_args) &#123;    cudaEvent_t start, stop;    // prepare buffer to scrub L2 cache between benchmarks    // just memset a large dummy array, recommended by    // https://stackoverflow.com/questions/31429377/how-can-i-clear-flush-the-l2-cache-and-the-tlb-of-a-gpu    // and apparently used in nvbench.    int deviceIdx = 0;    cudaCheck(cudaSetDevice(deviceIdx));    cudaDeviceProp deviceProp;    cudaCheck(cudaGetDeviceProperties(&amp;deviceProp, deviceIdx));    void* flush_buffer;    cudaCheck(cudaMalloc(&amp;flush_buffer, deviceProp.l2CacheSize));    cudaCheck(cudaEventCreate(&amp;start));    cudaCheck(cudaEventCreate(&amp;stop));    float elapsed_time = 0.f;    for (int i = 0; i &lt; repeats; i++) &#123;        // clear L2        cudaCheck(cudaMemset(flush_buffer, 0, deviceProp.l2CacheSize));        // now we can start recording the timing of the kernel        cudaCheck(cudaEventRecord(start, nullptr));        kernel(std::forward&lt;KernelArgs&gt;(kernel_args)...);        cudaCheck(cudaEventRecord(stop, nullptr));        cudaCheck(cudaEventSynchronize(start));        cudaCheck(cudaEventSynchronize(stop));        float single_call;        cudaCheck(cudaEventElapsedTime(&amp;single_call, start, stop));        elapsed_time += single_call;    &#125;    cudaCheck(cudaFree(flush_buffer));    return elapsed_time / repeats;&#125;\n\n参考:\n\nllm.c benckmark_kernel\nhow-can-i-clear-flush-the-l2-cache-and-the-tlb-of-a-gpu\nnvbench\n\n","tags":["GPU"]}]